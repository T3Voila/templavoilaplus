{
	"name": "templavoilaplus/templavoilaplus",
	"description": "Point-and-click, popular and easy template engine for TYPO3. Replacement for old TemplaVoilÃ !.",
	"license": [
		"GPL-2.0+"
	],
	"type": "typo3-cms-extension",
	"keywords": [
		"TYPO3",
		"extension",
		"template",
		"engine"
	],
	"authors": [
		{
			"name": "Alexander Opitz",
			"email": "opitz@extrameile-gehen.de",
			"homepage": "http://www.extrameile-gehen.de",
			"role": "Developer"
		}
	],
	"homepage": "https://templavoila.plus/",
	"require": {
		"php": ">=7.2.0 <7.4.99",
		"typo3/cms-core": "^8.7.0 || ^9.5.0 || ^10.4.0 || ^11.5.0"
	},
	"require-dev": {
		"ergebnis/composer-normalize": "^2.19.0",
		"friendsofphp/php-cs-fixer": "^3.4.0",
		"helmich/typo3-typoscript-lint": "^2.5.2",
		"jangregor/phpstan-prophecy": "^1.0.0",
		"php-coveralls/php-coveralls": "^2.5.2",
		"phpstan/extension-installer": "^1.1.0",
		"phpstan/phpstan": "^1.6.2",
		"phpstan/phpstan-phpunit": "^1.1.1",
		"phpunit/phpunit": "^8.5.26",
		"saschaegerer/phpstan-typo3": "^1.1.2",
		"seld/jsonlint": "^1.9.0",
		"squizlabs/php_codesniffer": "^3.6.2",
		"symfony/yaml": "^4.4.29 || ^5.3.6 || ^6.0",
		"typo3/coding-standards": "^0.5.2",
		"typo3/testing-framework": "^6.15.3"
	},
	"replace": {
		"typo3-ter/templavoilaplus": "self.version"
	},
	"conflict": {
		"templavoila/templavoila": "*",
		"typo3-ter/templavoila": "*"
	},
	"prefer-stable": true,
	"autoload": {
		"psr-4": {
			"Tvp\\TemplaVoilaPlus\\": "Classes/"
		}
	},
	"autoload-dev": {
		"psr-4": {
			"Tvp\\TemplaVoilaPlus\\Tests\\": "Tests/"
		}
	},
	"config": {
		"allow-plugins": {
			"typo3/class-alias-loader": true,
			"typo3/cms-composer-installers": true,
			"ergebnis/composer-normalize": true,
			"phpstan/extension-installer": true
		},
		"preferred-install": {
			"*": "dist"
		},
		"sort-packages": true,
		"vendor-dir": ".Build/vendor"
	},
	"extra": {
		"typo3/cms": {
			"app-dir": ".Build",
			"extension-key": "templavoilaplus",
			"web-dir": ".Build/public"
		}
	},
	"scripts": {
		"post-autoload-dump": [
			"@link-extension"
		],
		"ci": [
			"@ci:static"
		],
		"ci:composer:normalize": "@composer normalize --dry-run",
		"ci:json:lint": "find . ! -path '*.Build/*' ! -path '*node_modules/*' -name '*.json' | xargs -r php .Build/vendor/bin/jsonlint -q",
		"ci:php": [
			"@ci:php:copypaste",
			"@ci:php:cs-fixer",
			"@ci:php:lint",
			"@ci:php:sniff",
			"@ci:php:stan"
		],
		"ci:php:copypaste": "@php ./tools/phpcpd Classes",
		"ci:php:cs-fixer": "php-cs-fixer fix --config .php-cs-fixer.php -v --dry-run --using-cache no --diff",
		"ci:php:lint": "find *.php Classes Configuration Tests -name '*.php' -print0 | xargs -r -0 -n 1 -P 4 php -l",
		"ci:php:sniff": "phpcs Classes Configuration Tests",
		"ci:php:stan": "phpstan --no-progress",
		"ci:static": [
			"@ci:composer:normalize",
			"@ci:json:lint",
			"@ci:php:copypaste",
			"@ci:php:cs-fixer",
			"@ci:php:lint",
			"@ci:php:sniff",
			"@ci:php:stan",
			"@ci:ts:lint",
			"@ci:yaml:lint"
		],
		"ci:tests": [
			"@ci:tests:unit",
			"@ci:tests:functional"
		],
		"ci:tests:functional": "find 'Tests/Functional' -wholename '*Test.php' | parallel --gnu 'echo; echo \"Running functional test suite {}\"; .Build/vendor/bin/phpunit -c .Build/vendor/typo3/testing-framework/Resources/Core/Build/FunctionalTests.xml {}';",
		"ci:tests:unit": ".Build/vendor/bin/phpunit -c .Build/vendor/typo3/testing-framework/Resources/Core/Build/UnitTests.xml Tests/Unit",
		"ci:ts:lint": "typoscript-lint -c Configuration/TsLint.yml --ansi -n --fail-on-warnings -vvv Configuration/TypoScript",
		"ci:yaml:lint": "find . ! -path '*.Build/*' ! -path '*node_modules/*' -name '*.yml' | xargs -r php ./.Build/vendor/bin/yaml-lint",
		"composer:init": [
			"composer install"
		],
		"coverage:create-directories": "mkdir -p build/logs .Build/coverage",
		"docs:generate": [
			"docker run --rm t3docs/render-documentation show-shell-commands > tempfile.sh; echo 'dockrun_t3rd makehtml' >> tempfile.sh; bash tempfile.sh; rm tempfile.sh"
		],
		"fix:php": [
			"@fix:php:cs",
			"@fix:php:sniff"
		],
		"fix:php:cs": "php-cs-fixer fix --config .php-cs-fixer.php",
		"fix:php:sniff": "phpcbf Classes Configuration Tests",
		"initTools": [
			"@composer:init",
			"@yarn:init"
		],
		"js:lint": [
			"npm run lint:js"
		],
		"js:lint:fix": [
			"npm run lint:js:fix"
		],
		"link-extension": [
			"@php -r 'is_dir($extFolder=__DIR__.\"/.Build/public/typo3conf/ext/\") || mkdir($extFolder, 0777, true);'",
			"@php -r 'file_exists($extFolder=__DIR__.\"/.Build/public/typo3conf/ext/templavoilaplus\") || symlink(__DIR__,$extFolder);'"
		],
		"npm:init": [
			"@yarn:init"
		],
		"phpstan:baseline": ".Build/vendor/bin/phpstan  --generate-baseline=phpstan-baseline.neon",
		"prepare-release": [
			"rm .gitignore",
			"rm -rf .Build",
			"rm -rf .ddev",
			"rm -rf .github",
			"rm -rf .gitlab",
			"rm -rf Tests",
			"rm -rf tools",
			"rm .editorconfig",
			"rm .gitattributes",
			"rm .php-cs-fixer.php",
			"rm .eslintignore",
			"rm .eslintrc.json",
			"rm .prettierrc.js",
			"rm package.json",
			"rm stylelint.config.js",
			"rm codeception.yml",
			"rm phive.xml",
			"rm phpstan-baseline.neon",
			"rm phpstan.neon",
			"rm phpcs.xml"
		],
		"style:lint": [
			"npm run lint:style"
		],
		"style:lint:fix": [
			"npm run lint:style:fix"
		],
		"yarn:init": [
			"yarn --cwd Resources/Private install"
		]
	},
	"scripts-descriptions": {
		"ci": "Runs all dynamic and static code checks.",
		"ci:composer:normalize": "Checks the composer.json.",
		"ci:coverage:functional": "Generates the code coverage report for functional tests.",
		"ci:coverage:merge": "Merges the code coverage reports for unit and functional tests.",
		"ci:coverage:unit": "Generates the code coverage report for unit tests.",
		"ci:dynamic": "Runs all PHPUnit tests (unit and functional).",
		"ci:json:lint": "Lints the JSON files.",
		"ci:php": "Runs all static checks for the PHP files.",
		"ci:php:copypaste": "Checks for copy'n'pasted PHP code.",
		"ci:php:cs-fixer": "Checks the code style with the PHP Coding Standards Fixer (PHP-CS-Fixer).",
		"ci:php:lint": "Lints the PHP files for syntax errors.",
		"ci:php:sniff": "Checks the code style with PHP_CodeSniffer (PHPCS).",
		"ci:php:stan": "Checks the PHP types using PHPStan.",
		"ci:static": "Runs all static code checks (syntax, style, types).",
		"ci:tests": "Runs all PHPUnit tests (unit and functional).",
		"ci:tests:functional": "Runs the functional tests.",
		"ci:tests:unit": "Runs the unit tests.",
		"ci:ts:lint": "Lints the TypoScript files.",
		"ci:yaml:lint": "Lints the YAML files.",
		"coverage:create-directories": "Creates the directories needed for recording and merging the code coverage reports.",
		"docs:generate": "Renders the extension ReST documentation.",
		"fix:php": "Runs all fixers for the PHP code.",
		"fix:php:cs": "Fixes the code style with PHP-CS-Fixer.",
		"fix:php:sniff": "Fixes the code style with PHP_CodeSniffer.",
		"phpstan:baseline": "Updates the PHPStan baseline file to match the code.",
		"prepare-release": "Removes development-only files in preparation of a TER release."
	}
}
